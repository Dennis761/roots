#12*
import math

a = float(input('a = '))
b = float(input('b = '))
c = float(input('c = '))
D = b**2-4*a*c

def solution1(arg1, arg2, arg3):
    D_sqrt = math.sqrt(arg3)
    x1 = (-arg2-D_sqrt)/(2*arg1)
    return x1
def solution2(arg1, arg2, arg3):
    D_sqrt = math.sqrt(arg3)
    x2 = (-arg2+D_sqrt)/(2*arg1)
    return x2

if D<0:
    print("Немає дійсних розв'язків")
elif solution1(a, b, D)<0 and solution2(a, b, D)<0:
    print("Немає дійсних розв'язків")
elif D==0:
    print("2 дійсних розв'язки")
elif solution1(a, b, D)>0>solution2(a, b, D) or solution2(a, b, D)>0>solution1(a, b, D):
    print("2 дійсних розв'язки")
else:
    print("4 дійсних розв'язки")
    
#1. Спочатку я імпортував модуль 'math' тому, що мені потрібно було 
# використати функцію для виведення кореня квадратного, нажаль я не зміг
# знайти в docs іншого способу 
#2. Потім я створив нові зміні і назвав як : a, b, c, D , де a, b, c - коефіцієнти
# і D - дискримінант деякого біквадратного рівняння
#3. Оскільки я не міг одразу виписати в змінну D_sqrt корінь квадратний деякого
# числа d (тому що був ризик того, що дискримінант буде від'ємний і виникне помилка,
# а прописувати кожен раз к.к дискимінанта не дуже хотілося оскільки візульно би
# це складно сприймалося) я створив функції 'solutin1' та 'solution2',
# де повернув корені рівняння і тоді я вже міг використовувати ці функції
# після того як я провірив, що d>0
#4.1 Спираючись на математичні властивості ми можемо точно сказати,
# що якщо у нашого рівняння 4 степінь, то максимум скільки ми отримаємо
# розв'язків - 4
#4.2 якщо х1>0 i x2>0 тоді рівняння матиме 4 дійсних розв'язки тому, що
# корінь квадратний цих двух підкореней дасть нам ще по два кореня
# якщо x1>0>x2 або x2>0>x1 тоді рівняння матиме два розв'язки оскільки
# один із підкореней додатній і він дасть нам 2 дійсних кореня
# а інший від'ємний і з нього неможливо витягнути дійсного кореня
# очевидно якщо D = 0 тоді ми отримаємаємо теж 2 дійсних корення
# і якщо х1<0 i x2<0 то у нас взагалі не буде дійсних кореней
#5. Спираючись на пункти 4.2, 3 та використовуючи синтаксис if/elif
# останю частину кода яка перевіряла наш вираз на кількість дійсних чисел
#Підсумок: на цьому завдані я успішно навчився використовувати
# найпростіші модулі,функції та умови розгалуження, сподіваюся ці знання
# допоможуть мені реалізувати задачі у недалекому майбутньому